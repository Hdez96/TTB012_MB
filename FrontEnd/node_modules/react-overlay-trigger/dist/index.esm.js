import React, { useRef, useEffect, forwardRef } from 'react';
import ReactDOM from 'react-dom';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function attachRef(ref, node) {
  if (typeof ref === 'function') {
    ref(node);
  } else if (typeof ref === 'object') {
    ref.current = node;
  }
}

function combineRef() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return function functionalRef(node) {
    args.filter(function (arg) {
      return arg != null;
    }).forEach(function (ref) {
      return attachRef(ref, node);
    });
  };
}
var position = function position(placement, overlay, trigger, offsetParent, arrowSize) {
  if (arrowSize === void 0) {
    arrowSize = 0;
  }

  var overlayBcr = overlay.getBoundingClientRect();
  var triggertBcr = trigger.getBoundingClientRect();
  var offsetBcr = offsetParent.getBoundingClientRect();
  var style = {
    top: 0,
    left: 0
  };
  var offsetTop = triggertBcr.top - offsetBcr.top;
  var offsetLeft = triggertBcr.left - offsetBcr.left;

  switch (placement) {
    case 'top':
      {
        style.top = offsetTop - overlayBcr.height - arrowSize;
        style.left = offsetLeft + (triggertBcr.width - overlayBcr.width) / 2;
        break;
      }

    case 'bottom':
      {
        style.top = offsetTop + triggertBcr.height + arrowSize;
        style.left = offsetLeft + (triggertBcr.width - overlayBcr.width) / 2;
        break;
      }

    case 'left':
      {
        style.top = offsetTop + (triggertBcr.height - overlayBcr.height) / 2;
        style.left = offsetLeft - overlayBcr.width - arrowSize;
        break;
      }

    case 'right':
      {
        style.top = offsetTop + (triggertBcr.height - overlayBcr.height) / 2;
        style.left = offsetLeft + triggertBcr.width + arrowSize;
        break;
      }
  }

  var offset = {
    top: style.top,
    left: style.left,
    bottom: style.top,
    right: style.left
  };
  var popupRect = {
    top: offset.top + offsetBcr.top,
    left: offset.left + offsetBcr.left,
    bottom: offset.top + offsetBcr.top,
    right: offset.left + offsetBcr.left
  };
  return {
    offset,
    rect: popupRect
  };
};

var mutationObserverOption = {
  subtree: true,
  childList: true,
  attributes: true,
  characterData: true
};

function createObserver(node, onMeasure) {
  if (window.ResizeObserver) {
    var ro = new ResizeObserver(function () {
      return onMeasure();
    });
    ro.observe(node);
    return ro;
  } else {
    var cachedSize = {
      width: 0,
      height: 0
    };

    function handleMutate() {
      var _node$getBoundingClie = node.getBoundingClientRect(),
          width = _node$getBoundingClie.width,
          height = _node$getBoundingClie.height;

      if (cachedSize.width !== width || cachedSize.height !== height) {
        cachedSize.width = width;
        cachedSize.height = height;
        onMeasure();
      }
    }

    var mob = new MutationObserver(handleMutate);
    mob.observe(node, mutationObserverOption);
    return mob;
  }
}

var DomObserver = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      onMeasure = _ref.onMeasure;
  var innerRef = useRef(null);
  useEffect(function () {
    var node = innerRef.current;
    var observer = null;

    if (node) {
      observer = createObserver(node, onMeasure);
    }

    return function () {
      if (observer) {
        observer.disconnect();
      }
    };
  }, []);
  return /*#__PURE__*/React.cloneElement(children, {
    ref: combineRef(innerRef, ref, children.ref)
  });
});
DomObserver.defaultProps = {
  onMeasure() {}

};

var Overlay = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(Overlay, _React$Component);

  function Overlay(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.getStyle = function () {
      var _this$state = _this.state,
          offsetTop = _this$state.offsetTop,
          offsetLeft = _this$state.offsetLeft;
      var transforms = `translate3d(${offsetLeft}px, ${offsetTop}px, 0)`;
      return {
        position: 'absolute',
        left: 0,
        top: 0,
        transform: transforms,
        WebkitTransform: transforms,
        MozTransform: transforms,
        msTransform: transforms
      };
    };

    _this.adjustPosition = function () {
      var container = _this.state.container;
      var _this$props = _this.props,
          getTrigger = _this$props.getTrigger,
          placement = _this$props.placement,
          arrowProps = _this$props.arrowProps;
      var triggerNode = getTrigger();
      var overlayNode = _this.overlayRef.current;

      if (!triggerNode || !overlayNode || !container) {
        return;
      }

      var expected = position(placement, overlayNode, triggerNode, container, arrowProps.size);
      var _expected$offset = expected.offset,
          top = _expected$offset.top,
          left = _expected$offset.left;
      var _this$state2 = _this.state,
          offsetTop = _this$state2.offsetTop,
          offsetLeft = _this$state2.offsetLeft;

      if (top !== offsetTop || left !== offsetLeft) {
        _this.setState({
          offsetTop: top,
          offsetLeft: left
        });
      }
    };

    _this.overlayRef = /*#__PURE__*/React.createRef();
    _this.state = {
      offsetTop: 0,
      offsetLeft: 0,
      container: props.container
    };
    return _this;
  }

  Overlay.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    // resolve dom node change
    if (props.container !== state.container) {
      return {
        container: props.container
      };
    }

    return null;
  };

  var _proto = Overlay.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.adjustPosition();
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (prevState.container !== this.state.container || prevProps.placement !== this.props.placement || prevProps.arrowProps !== this.props.arrowProps) {
      this.adjustPosition();
    }
  };

  _proto.render = function render() {
    var children = this.props.children;
    var container = this.state.container;
    if (!container || !children) return null;
    return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(DomObserver, {
      ref: this.overlayRef,
      onMeasure: this.adjustPosition
    }, /*#__PURE__*/React.cloneElement(children, {
      style: _extends({}, children.props.style, this.getStyle())
    })), container);
  };

  return Overlay;
}(React.Component);

Overlay.defaultProps = {
  arrowProps: {
    size: 0
  }
};

var isPointerEventSupported = !!window.PointerEvent;
var isTouchEventSupported = !!window.TouchEvent;

var safeCall = function safeCall(fn) {
  if (typeof fn === 'function') {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    fn.apply(void 0, args);
  }
};

var OverlayTrigger = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(OverlayTrigger, _React$Component);

  function OverlayTrigger(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handleMouseEnter = function (e) {
      safeCall(_this.getChildProps().onMouseEnter, e);

      if (!isPointerEventSupported && !isTouchEventSupported) {
        _this.open();
      }
    };

    _this.handleMouseLeave = function (e) {
      safeCall(_this.getChildProps().onMouseLeave, e);

      if (!isPointerEventSupported && !isTouchEventSupported) {
        _this.close();
      }
    };

    _this.handlePointerEnter = function (e) {
      safeCall(_this.getChildProps().onPointerEnter, e);

      if (e.pointerType === 'mouse') {
        _this.open();
      }
    };

    _this.handlePointerLeave = function (e) {
      safeCall(_this.getChildProps().onPointerLeave, e);

      if (e.pointerType === 'mouse') {
        _this.close();
      }
    };

    _this.handleClick = function (e) {
      safeCall(_this.getChildProps().onClick, e);

      if (_this.state.visible) {
        _this.close();
      } else {
        _this.open();
      }
    };

    _this.handleFocus = function (e) {
      safeCall(_this.getChildProps().onFocus, e);

      _this.open();
    };

    _this.handleBlur = function (e) {
      safeCall(_this.getChildProps().onBlur, e);

      _this.close();
    };

    _this.getTriggerProps = function () {
      var triggers = _this.props.triggers;
      var triggerProps = {};

      if (triggers.indexOf('hover') !== -1) {
        triggerProps.onMouseEnter = _this.handleMouseEnter;
        triggerProps.onMouseLeave = _this.handleMouseLeave;
        triggerProps.onPointerEnter = _this.handlePointerEnter;
        triggerProps.onPointerLeave = _this.handlePointerLeave;
      }

      if (triggers.indexOf('focus') !== -1) {
        triggerProps.onFocus = _this.handleFocus;
        triggerProps.onBlur = _this.handleBlur;
      }

      if (triggers.indexOf('click') !== -1) {
        triggerProps.onClick = _this.handleClick;
      }

      return triggerProps;
    };

    _this.open = function () {
      _this.setState({
        visible: true
      });
    };

    _this.close = function () {
      _this.setState({
        visible: false
      });
    };

    _this.getTrigger = function () {
      return _this.triggerRef.current;
    };

    _this.scheduleUpdate = function () {
      var overlayInstance = _this.overlayRef.current;

      if (overlayInstance) {
        overlayInstance.adjustPosition();
      }
    };

    _this.triggerRef = /*#__PURE__*/React.createRef();
    _this.overlayRef = /*#__PURE__*/React.createRef();
    _this.state = {
      visible: false
    };
    return _this;
  }

  var _proto = OverlayTrigger.prototype;

  _proto.getChildProps = function getChildProps() {
    return this.props.children.props;
  };

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        forwardRef = _this$props.forwardRef,
        container = _this$props.container,
        overlay = _this$props.overlay,
        arrowProps = _this$props.arrowProps,
        placement = _this$props.placement;
    var child = React.Children.only(children);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DomObserver, {
      ref: combineRef(this.triggerRef, forwardRef),
      onMeasure: this.scheduleUpdate
    }, child != null && child !== false && /*#__PURE__*/React.cloneElement(child, this.getTriggerProps())), this.state.visible && /*#__PURE__*/React.createElement(Overlay, {
      arrowProps: arrowProps,
      container: container,
      placement: placement,
      getTrigger: this.getTrigger,
      ref: this.overlayRef
    }, overlay));
  };

  return OverlayTrigger;
}(React.Component);

OverlayTrigger.defaultProps = {
  container: document.body
};
var OverlayTrigger$1 = /*#__PURE__*/forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(OverlayTrigger, _extends({}, props, {
    forwardRef: ref
  }));
});

export default OverlayTrigger$1;
