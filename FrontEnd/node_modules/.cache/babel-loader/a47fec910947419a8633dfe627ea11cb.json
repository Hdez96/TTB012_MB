{"ast":null,"code":"import React from \"react\";\nimport { logger, invariant } from \"@rpldy/shared\";\nvar UploadyContext = /*#__PURE__*/React.createContext(null);\nvar NO_INPUT_ERROR_MSG = \"Uploady - Context. File input isn't available\";\nexport var createContextApi = function (uploader, internalInputRef) {\n  var fileInputRef, showFileUploadOptions;\n\n  if (internalInputRef) {\n    fileInputRef = internalInputRef;\n  } else {\n    logger.debugLog(\"Uploady context - didn't receive input field ref - waiting for external ref\");\n  }\n\n  var getInputField = function () {\n    var _fileInputRef;\n\n    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;\n  };\n\n  var onFileInputChange = function () {\n    var input = getInputField();\n    invariant(input, NO_INPUT_ERROR_MSG);\n    input.removeEventListener(\"change\", onFileInputChange);\n    var addOptions = showFileUploadOptions;\n    showFileUploadOptions = null;\n    upload(input.files, addOptions);\n  };\n\n  var upload = function (files, addOptions) {\n    uploader.add(files, addOptions);\n  };\n\n  return {\n    hasUploader: function hasUploader() {\n      return !!uploader;\n    },\n    setExternalFileInput: function setExternalFileInput(extRef) {\n      fileInputRef = extRef;\n    },\n    showFileUpload: function showFileUpload(addOptions) {\n      var input = getInputField();\n      invariant(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options\n\n      showFileUploadOptions = addOptions;\n      input.removeEventListener(\"change\", onFileInputChange);\n      input.addEventListener(\"change\", onFileInputChange); //clear the input value so same file can be uploaded again\n\n      input.value = \"\";\n      input.click();\n    },\n    upload: upload,\n    processPending: function processPending(uploadOptions) {\n      uploader.upload(uploadOptions);\n    },\n    setOptions: function setOptions(options) {\n      uploader.update(options);\n    },\n    getOptions: function getOptions() {\n      return uploader.getOptions();\n    },\n    getExtension: function getExtension(name) {\n      return uploader.getExtension(name);\n    },\n    abort: function abort(itemId) {\n      uploader.abort(itemId);\n    },\n    abortBatch: function abortBatch(batchId) {\n      uploader.abortBatch(batchId);\n    },\n    on: function on(name, cb) {\n      return uploader.on(name, cb);\n    },\n    once: function once(name, cb) {\n      return uploader.once(name, cb);\n    },\n    off: function off(name, cb) {\n      return uploader.off(name, cb);\n    }\n  };\n};\nexport default UploadyContext;","map":{"version":3,"sources":["/home/ubuntu/TTB012_MB/FrontEnd/node_modules/@rpldy/shared-ui/lib/esm/UploadyContext.js"],"names":["React","logger","invariant","UploadyContext","createContext","NO_INPUT_ERROR_MSG","createContextApi","uploader","internalInputRef","fileInputRef","showFileUploadOptions","debugLog","getInputField","_fileInputRef","current","onFileInputChange","input","removeEventListener","addOptions","upload","files","add","hasUploader","setExternalFileInput","extRef","showFileUpload","addEventListener","value","click","processPending","uploadOptions","setOptions","options","update","getOptions","getExtension","name","abort","itemId","abortBatch","batchId","on","cb","once","off"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { logger, invariant } from \"@rpldy/shared\";\nvar UploadyContext = /*#__PURE__*/React.createContext(null);\nvar NO_INPUT_ERROR_MSG = \"Uploady - Context. File input isn't available\";\nexport var createContextApi = function (uploader, internalInputRef) {\n  var fileInputRef, showFileUploadOptions;\n\n  if (internalInputRef) {\n    fileInputRef = internalInputRef;\n  } else {\n    logger.debugLog(\"Uploady context - didn't receive input field ref - waiting for external ref\");\n  }\n\n  var getInputField = function () {\n    var _fileInputRef;\n\n    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;\n  };\n\n  var onFileInputChange = function () {\n    var input = getInputField();\n    invariant(input, NO_INPUT_ERROR_MSG);\n    input.removeEventListener(\"change\", onFileInputChange);\n    var addOptions = showFileUploadOptions;\n    showFileUploadOptions = null;\n    upload(input.files, addOptions);\n  };\n\n  var upload = function (files, addOptions) {\n    uploader.add(files, addOptions);\n  };\n\n  return {\n    hasUploader: function hasUploader() {\n      return !!uploader;\n    },\n    setExternalFileInput: function setExternalFileInput(extRef) {\n      fileInputRef = extRef;\n    },\n    showFileUpload: function showFileUpload(addOptions) {\n      var input = getInputField();\n      invariant(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options\n\n      showFileUploadOptions = addOptions;\n      input.removeEventListener(\"change\", onFileInputChange);\n      input.addEventListener(\"change\", onFileInputChange); //clear the input value so same file can be uploaded again\n\n      input.value = \"\";\n      input.click();\n    },\n    upload: upload,\n    processPending: function processPending(uploadOptions) {\n      uploader.upload(uploadOptions);\n    },\n    setOptions: function setOptions(options) {\n      uploader.update(options);\n    },\n    getOptions: function getOptions() {\n      return uploader.getOptions();\n    },\n    getExtension: function getExtension(name) {\n      return uploader.getExtension(name);\n    },\n    abort: function abort(itemId) {\n      uploader.abort(itemId);\n    },\n    abortBatch: function abortBatch(batchId) {\n      uploader.abortBatch(batchId);\n    },\n    on: function on(name, cb) {\n      return uploader.on(name, cb);\n    },\n    once: function once(name, cb) {\n      return uploader.once(name, cb);\n    },\n    off: function off(name, cb) {\n      return uploader.off(name, cb);\n    }\n  };\n};\nexport default UploadyContext;"]},"metadata":{},"sourceType":"module"}